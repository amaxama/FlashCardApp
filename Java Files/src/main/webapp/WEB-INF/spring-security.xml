<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
 http://www.springframework.org/schema/security
 http://www.springframework.org/schema/security/spring-security-3.2.xsd">
    
    
    <beans:bean id="webexpressionHandler"
                class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/> 
                

    <http pattern="/login" security="none" />
    <http pattern="/error" security="none" />
    <http pattern="/css/**" security="none" />
    <http pattern="/js/**" security="none" />
    <http pattern="/img/**" security="none" />
    <http pattern="/fonts/**" security="none" />

    <http auto-config="true">
        <form-login login-processing-url="/j_spring_security_check"
                    login-page="/login"
                    authentication-failure-url="/login?login_error=1"/>
        <intercept-url pattern="/" access="IS_AUTHENTICATED_ANONYMOUSLY"/>     
        <intercept-url pattern="/home" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/content" access="ROLE_USER"/>
        <intercept-url pattern="/admin" access="ROLE_ADMIN"/>        
        <intercept-url pattern="/**" access="ROLE_USER"/> 

        <!--Add any intercept-urls we want to direct to other html pages - shows the access to them-->

        <!--User has multiple roles - user service, write query that can go to data source and pick up the roles and users -->
        <!--In database, better to have user have list of roles - on website, will create user and assign them a list of roles - will be working from the point of view of the user-->
     </http>

    <authentication-manager>
        <authentication-provider>
            <!--<password-encoder ref="encoder"/>-->
            <jdbc-user-service id="userService"
                               data-source-ref="dataSource"
                               users-by-username-query=
                                    "SELECT userName, password, active FROM user WHERE userId=?"
                               authorities-by-username-query=
                                    "SELECT r.roleName FROM role r JOIN userRole ur ON r.roleId = ur.roleId WHERE ur.userId = ?" />
                                     
        </authentication-provider>
    </authentication-manager>

</beans:beans>

